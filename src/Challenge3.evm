## @title Integer Square Root.
## @author Tiago de Paula <tiagodepalves@gmail.com>
## @notice Calculate the integer square root $0 \leq n < 2^{256}$.
## @notice Gas usage: exactly 376 gas is used.
## @dev Based on <https://github.com/PaulRBerg/prb-math/blob/v4.1.0/src/Common.sol#L587-L675>.

push0
calldataload
push1 1
## Stack: 1, x

## Find the most significant bit, which doubles as `log2(x)`.
## if x >= 2**128:
push16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
dup3
gt
# msb7 = (x >= 2**128) ? 128 : 0
push1 7
shl
# x >>= msb7
dup3
dup2
shr
## if x >= 2**64:
push8 0xFFFFFFFFFFFFFFFF
dup2
gt
# msb6 = (x >= 2**64) ? 64 : 0
push1 6
shl
# x >>= msb6
swap1
dup2
shr
## if x >= 2**32:
push4 0xFFFFFFFF
dup2
gt
# msb5 = (x >= 2**32) ? 32 : 0
push1 5
shl
# x >>= msb5
swap1
dup2
shr
## if x >= 2**16:
push2 0xFFFF
dup2
gt
# msb4 = (x >= 2**16) ? 16 : 0
push1 4
shl
# x >>= msb4
swap1
dup2
shr
## if x >= 2**8:
push1 0xFF
dup2
gt
# msb3 = (x >= 2**8) ? 8 : 0
push1 3
shl
# x >>= msb3
swap1
dup2
shr
## if x >= 2**4:
push1 0x0F
dup2
gt
# msb2 = (x >= 2**4) ? 4 : 0
push1 2
shl
# x >>= msb2
swap1
dup2
shr
## if x >= 2**2:
push1 0x04
lt
# msb1 = (x >= 2**2) ? 2 : 0
dup8
shl
# msb = msb1 | msb2 | msb3 | msb4 | msb5 | msb6 | msb7
or
or
or
or
or
or
## Stack: msb, 1, x

## Get the closest power of two: $x_0 = 2^{\lfloor \log_2(x) / 2 \rfloor}$.
## This will be our initial guess for Newton's method, which has at least one bit correct.
dup2
shr
shl
## Stack: result, x

## Now we have 1 bit correct of $\sqrt{x}$. The next 7 iterations of Newton's method will expand it into 256 bits.
## Note: division by zero returns 0, so not an issue here.
# 1: result = (result + x / result) >> 1
dup1
dup3
div
add
push1 1
shr
# 2: result = (result + x / result) >> 1
dup1
dup3
div
add
push1 1
shr
# 3: result = (result + x / result) >> 1
dup1
dup3
div
add
push1 1
shr
# 4: result = (result + x / result) >> 1
dup1
dup3
div
add
push1 1
shr
# 5: result = (result + x / result) >> 1
dup1
dup3
div
add
push1 1
shr
# 6: result = (result + x / result) >> 1
dup1
dup3
div
add
push1 1
shr
# 7: result = (result + x / result) >> 1
dup1
dup3
div
add
push1 1
shr
## Stack: result, x

## We do an extra iteration to validate convergence. This is only really required for almost perfect squares.
# 8: nextResult = (result + x / result) >> 1
dup1
swap2
div
dup2
add
push1 1
shr
## The mean of the last two iteration will give the correct value, even if in a `⌊√x⌋` => `⌊√x⌋ + 1` cycle.
# result = (result + nextResult) >> 1
add
push1 1
shr
## Stack: result

# return result
push0
mstore
push1 0x20
push0
return

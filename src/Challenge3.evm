## @title Efficient Integer Square Root method.
## @author Tiago de Paula <tiagodepalves@gmail.com>
## @notice Runtime cost: 311 gas (293 discounting RETURN and CALLDATALOAD logic).
## @dev Based on <https://gist.github.com/Lohann/f01e2558691ba8648f1e5a7c6e8d37da>.

push0
calldataload
# stack: x

## First, we find an approximation for $\log_2(x)$.
##
## The following algorithm does a "binary seach" over the regions of $x$, updating our approximation of $\log_2(x)$
## depending on wether the current value is bigger or lower than threshold (i.e. the highest bit is left or right
## of a specific region). At each iteration, it gives one extra bit of information on the result of $\log_2(x)$.

# if x >= 2**128:
dup1
push16 0xffffffffffffffffffffffffffffffff
lt
# 8th bit: log2(x) |= 128
push1 7
shl
# stack: log2, x

# x' = x >> log2
dup2
dup2
shr
# if x' >= 2**64:
push8 0xffffffffffffffff
lt
# 7th bit: log2(x) |= 64
push1 6
shl
or
# stack: log2, x

# x' = x >> log2
dup2
dup2
shr
# if x' >= 2**32:
push4 0xffffffff
lt
# 6th bit: log2(x) |= 32
push1 5
shl
or
# stack: log2, x

# x' = x >> log2
dup2
dup2
shr
# if x' >= 2**16:
push2 0xffff
lt
# 5th bit: log2(x) |= 16
push1 4
shl
or
# stack: log2, x

# x' = x >> log2
dup2
dup2
shr
# if x' >= 2**8:
push1 0xff
lt
# 4th bit: log2(x) |= 8
push1 3
shl
or
# stack: log2, x

## At this point, our $\log_2(x)$ has the 5 upper bits right, so $k = x >> \log_2(x)$ is a number between 0 and 255.
## We'll use a De Bruijn sequence to approximate the square root of $k \times 256$, and then do:
## \[ \sqrt{x} = \sqrt{256 k} \times 2^{\log_2(x) / 2} / 16 = \sqrt{k} \times 2^{\log_2(x) / 2} \]
##
## Since the EVM can only index 32 in the stack, we'll use the upper 5 bits of $k$ for indexing.
push32 0x1b3647545f69737b838b9299a0a6acb2b7bdc2c8cdd2d6dbe0e4e9edf1f6fafe
# stack: table, log2, x

# k = x >> log2
dup3
dup3
shr
## throw away the first 3 bits
# i = k >> 3
push1 3
shr
byte
# stack: table[i], log2, x

## Here we use $\sqrt{x} = \sqrt{k} \times 2^{\log_2(x) / 2}$ with 2 bits of precision using the De Bruijn sequence
## approximation.
swap1
push1 1
shr
# stack: log2/2, table[i], x
shl
## remove the sqrt base $\sqrt{256 k} = 16 \sqrt{k}$
push1 4
shr
# stack: root, x

## Now we have 2 bit correct of $\sqrt{x}$, and we need 128 bits for the roots of all `uint256` numbers. Each iteration
## of the Newton's method doubles the precision, so 6 iterations are required.

## Note: division by zero returns 0, giving the correct result for $\sqrt{0}$.
# 1: root = (root + x / root) / 2
dup1
dup3
div
add
push1 1
shr
# 2: root = (root + x / root) / 2
dup1
dup3
div
add
push1 1
shr
# 3: root = (root + x / root) / 2
dup1
dup3
div
add
push1 1
shr
# 4: root = (root + x / root) / 2
dup1
dup3
div
add
push1 1
shr
# 5: root = (root + x / root) / 2
dup1
dup3
div
add
push1 1
shr
# 6: root = (root + x / root) / 2
dup1
dup3
div
add
push1 1
shr
# stack: root, x

## For almost perfect squares, Newton's method cycles between ⌊√x⌋ and ⌊√x⌋ + 1, so we need to round the result down.
# if x > x / root:
dup1
swap2
div
dup2
gt
# x -= 1
swap1
sub
# stack: root

# return root
push0
mstore
push1 0x20
push0
return
